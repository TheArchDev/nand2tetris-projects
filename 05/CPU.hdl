// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction[15] is op code; A-instruction (0) vs C-instruction (1)
    Mux16(a=instruction, b=output-alu, sel=instruction[15], out=input-a-register);

    // write to A-register if i) A-instruction ii) C-instruction with d1 true
    Not(in=instruction[15], out=a-instruction);
    // instruction[5] is d1 from dest bits
    And(a=instruction[15], b=instruction[5], out=c-instruction-with-d1);
    Or(a=a-instruction, b=c-instruction-with-d1, out=load-a-register);

    ARegister(in=input-a-register, load=load-a-register, out=output-a-register, out[0..14]=addressM);

    // instruction[12] is a from comp bits
    Mux16(a=output-a-register, b=inM, sel=instruction[12], out=input-alu-y);

    // write to D-register if C-instruction with d2 true
    // instruction[4] is d2 from dest bits
    And(a=instruction[15], b=instruction[4], out=load-d-register);
    DRegister(in=output-alu, load=load-d-register, out=input-alu-x);

    // write to M-register if C-instruction with d3 true
    // instruction[3] is d3 from dest bits
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

    ALU(
        x=input-alu-x,
        y=input-alu-y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        zr=output-alu-zr,
        ng=output-alu-ng,
        out=output-alu,
        out=outM
    );

    // if j1 bit is 1, jump in cases where comp is less than zero: JLT, JNE, JLE, JMP
    // instruction[2] is j1 from jump bits
    And(a=instruction[2], b=output-alu-ng, out=pc-j1);
    
    // if j2 bit is 1, jump in cases where comp is equal to zero: JEQ, JGE, JLE, JMP
    // instruction[1] is j2 from jump bits
    And(a=instruction[1], b=output-alu-zr, out=pc-j2);

    // if j3 bit is 1, jump in cases where comp is greater than zero: JGT, JGE, JNE, JMP
    // instruction[0] is j3 from jump bits
    Or(a=output-alu-zr, b=output-alu-ng, out=not-positive);
    Not(in=not-positive, out=positive);
    And(a=instruction[0], b=positive, out=pc-j3);

    Or(a=pc-j1, b=pc-j2, out=temp-or);
    Or(a=temp-or, b=pc-j3, out=temp-load-pc);
    // only jump if C-instruction
    And(a=instruction[15], b=temp-load-pc, out=load-pc);
    PC(in=output-a-register, load=load-pc, inc=true, reset=reset, out[0..14]=pc);
}